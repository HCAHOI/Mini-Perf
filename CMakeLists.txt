# this is the build file for project 
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(mini_benchmark_sample LANGUAGES CXX C)

# target
add_executable(mini_benchmark_sample "")
set_target_properties(mini_benchmark_sample PROPERTIES OUTPUT_NAME "mini_benchmark_sample")
set_target_properties(mini_benchmark_sample PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(mini_benchmark_sample PRIVATE
    include
)
target_compile_options(mini_benchmark_sample PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
set_target_properties(mini_benchmark_sample PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(mini_benchmark_sample PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(mini_benchmark_sample PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(mini_benchmark_sample PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(mini_benchmark_sample PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET mini_benchmark_sample PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(mini_benchmark_sample PRIVATE
    -m64
)
target_sources(mini_benchmark_sample PRIVATE
    sample/mini_benchmark_sample.cpp
    include/utilities.hpp
    include/mini_perf.hpp
    include/mini_perf_macro.hpp
    include/linux-perf-events.h
)

# target
add_library(mini_perf STATIC "")
set_target_properties(mini_perf PROPERTIES OUTPUT_NAME "mini_perf")
set_target_properties(mini_perf PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(mini_perf PRIVATE
    include
)
target_compile_options(mini_perf PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
set_target_properties(mini_perf PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(mini_perf PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(mini_perf PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(mini_perf PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(mini_perf PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET mini_perf PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(mini_perf PRIVATE
    -m64
)
target_sources(mini_perf PRIVATE
    src/mini_perf.cpp
    include/utilities.hpp
    include/mini_perf.hpp
    include/mini_perf_macro.hpp
    include/linux-perf-events.h
)

# target
add_executable(mini_perf_macro_sample "")
set_target_properties(mini_perf_macro_sample PROPERTIES OUTPUT_NAME "mini_perf_macro_sample")
set_target_properties(mini_perf_macro_sample PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(mini_perf_macro_sample PRIVATE
    include
)
target_compile_options(mini_perf_macro_sample PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
set_target_properties(mini_perf_macro_sample PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(mini_perf_macro_sample PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(mini_perf_macro_sample PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(mini_perf_macro_sample PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(mini_perf_macro_sample PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET mini_perf_macro_sample PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(mini_perf_macro_sample PRIVATE
    -m64
)
target_sources(mini_perf_macro_sample PRIVATE
    sample/mini_perf_macro_sample.cpp
    include/utilities.hpp
    include/mini_perf.hpp
    include/mini_perf_macro.hpp
    include/linux-perf-events.h
)

# target
add_executable(mini_perf_sample "")
set_target_properties(mini_perf_sample PROPERTIES OUTPUT_NAME "mini_perf_sample")
set_target_properties(mini_perf_sample PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/linux/x86_64/release")
target_include_directories(mini_perf_sample PRIVATE
    include
)
target_compile_options(mini_perf_sample PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-m64>
    $<$<COMPILE_LANGUAGE:CXX>:-m64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
set_target_properties(mini_perf_sample PROPERTIES CXX_EXTENSIONS OFF)
target_compile_features(mini_perf_sample PRIVATE cxx_std_20)
if(MSVC)
    target_compile_options(mini_perf_sample PRIVATE $<$<CONFIG:Release>:-Ox -fp:fast>)
else()
    target_compile_options(mini_perf_sample PRIVATE -O3)
endif()
if(MSVC)
else()
    target_compile_options(mini_perf_sample PRIVATE -fvisibility=hidden)
endif()
if(MSVC)
    set_property(TARGET mini_perf_sample PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_options(mini_perf_sample PRIVATE
    -m64
)
target_sources(mini_perf_sample PRIVATE
    sample/mini_perf_sample.cpp
    include/utilities.hpp
    include/mini_perf.hpp
    include/mini_perf_macro.hpp
    include/linux-perf-events.h
)

